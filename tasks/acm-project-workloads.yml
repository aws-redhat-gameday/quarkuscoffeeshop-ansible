---
- name: check if  project "{{ development_project }}" exists
  shell: "{{ oc_location }} get project {{ development_project }}"
  register: user_project
  ignore_errors: true
  changed_when: false
  tags: acm-workload

- name: create projects 
  command: "{{ oc_location }} adm new-project {{ item }}"
  when: user_project is failed
  tags: acm-workload
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"
    - "{{ homeoffice_project }}"
    - "{{ project_namespace }}"

- name: Create Service Account for Pipelines
  kubernetes.core.k8s:
    state: present
    namespace:  "{{ development_project }}"
    definition: "{{ lookup('file', 'pipeline-sa.yaml') }}"
  tags: acm-workload

- name: Set privileged containers for the push
  shell: "{{ oc_location }} adm policy add-scc-to-user privileged -z pipeline -n {{ development_project }}"
  tags: acm-workload

- name: set permissions project {{ homeoffice_project }}
  command: "{{ oc_location }} adm policy add-role-to-user admin system:serviceaccount:{{ homeoffice_project }}:pipeline -n {{ item }}"
  tags: acm-workload
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"

- name: set permissions project "{{ homeoffice_project }}" 
  command: "{{ oc_location }} policy add-role-to-group system:image-puller system:serviceaccounts:{{ homeoffice_project }} -n {{ item }}"
  tags: acm-workload
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"

- name: set permissions project "{{ homeoffice_project }}" 
  command: "{{ oc_location }} adm policy add-role-to-user admin system:serviceaccount:{{ item }}:pipeline -n {{ homeoffice_project }}"
  tags: acm-workload
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"

- name: set permissions project {{ project_namespace }}
  command: "{{ oc_location }} adm policy add-role-to-user admin system:serviceaccount:{{ project_namespace }}:pipeline -n {{ item }}"
  tags: acm-workload
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"

- name: set permissions project "{{ project_namespace }}" 
  command: "{{ oc_location }} policy add-role-to-group system:image-puller system:serviceaccounts:{{ project_namespace }} -n {{ item }}"
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"

- name: set permissions project "{{ project_namespace }}" 
  command: "{{ oc_location }} adm policy add-role-to-user admin system:serviceaccount:{{ item }}:pipeline -n {{ project_namespace }}"
  tags: acm-workload
  ignore_errors: true 
  with_items:
    - "{{ development_project }}"
    
- name: AMQ Streams installation
  vars: 
    project_namespace: "{{ homeoffice_project }}"
  include_tasks: amq-streams-install.yml
  tags: acm-workload

- name: Create Postgres Secret
  kubernetes.core.k8s:
    state: present
    namespace:  "{{ homeoffice_project }}"
    definition: "{{ lookup('template', 'postgres-secret.j2') }}"
  tags: acm-workload

- name: Create Postgres Database
  kubernetes.core.k8s:
    state: present
    namespace:  "{{ homeoffice_project }}"
    definition: "{{ lookup('template', 'postgres.yaml.j2') }}"
  tags: acm-workload

- name: Copying over Postgres utils file
  template:
    src: templates/postgres-utils.yaml.j2
    dest:  "{{ config_location }}/postgres-utils.yaml"
    owner: "{{ default_owner }}"
    group: "{{ default_group }}"
    mode: 0666
  when: not delete_deployment|bool
  tags: 
  - acm-workload

- name: Deploy Postgres utils
  command: "{{ oc_location }}  create -f {{ config_location }}/postgres-utils.yaml -n {{ homeoffice_project }}"
  ignore_errors: yes
  when: not delete_deployment|bool
  tags: 
  - acm-workload

- name: Waiting for postgres-utilites to deploy
  shell: |
    set -o pipefail && {{ oc_location }} get pod  -n {{ homeoffice_project }} | grep -E 'postgres-utilites-[0-9a-z][0-9a-z].*-[0-9a-z]{5}' | grep Running  | wc -l
  register: postgres_build_complete
  when: not delete_deployment|bool
  until: "'1' in postgres_build_complete.stdout"
  retries: 100
  delay: 25
  args:
    executable: /bin/bash
  tags: 
  - acm-workload

- name:  Get postgres-utilites Pod name
  shell: "{{ oc_location }} get pods  -n {{ homeoffice_project }} | grep Running | grep -E -o 'postgres-utilites-[0-9a-z][0-9a-z].*-[0-9a-z]{5}'"
  register: get_podname
  when: not delete_deployment|bool
  args:
    executable: /bin/bash
  tags: 
  - acm-workload

- name: Saving  postgres-utilites Pod name
  set_fact:
    postgres_utils_pod: "{{ get_podname.stdout }}"
  when: not delete_deployment|bool
  tags: 
  - acm-workload

- name:  Create and load postgres database
  command: "{{ oc_location }}  exec -it {{ postgres_utils_pod }} -n {{ homeoffice_project }}  -- /bin/init_postgres_db.sh"
  when: not delete_deployment|bool
  tags: 
  - acm-workload

- name: Delete Postgres utils
  command: "{{ oc_location }}  delete -f {{ config_location }}/postgres-utils.yaml -n {{ homeoffice_project }}"
  ignore_errors: yes
  when: delete_deployment|bool
  tags: 
  - acm-workload
